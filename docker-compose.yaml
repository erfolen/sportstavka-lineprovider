services:
  # База данных line-provider
  db_line-provider:
    image: postgres:13.8
    container_name: db_line-provider
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PORT: ${DB_PORT}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./DockerVolumes/pgdata_lp:/var/lib/postgresql/data
    networks:
      - line-provider-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}" ]
      interval: 30s
      retries: 5
      timeout: 5s


  # Тестовая база данных
  test-database_lp:
    image: postgres:13.8
    container_name: test-database_lp
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_TEST_USER}
      POSTGRES_PASSWORD: ${DB_TEST_PASSWORD}
      POSTGRES_DB: ${DB_TEST_NAME}
    ports:
      - "${DB_TEST_PORT}:5432"
    volumes:
      - ./DockerVolumes/pgdata_tst_lp:/var/lib/postgresql/data
    networks:
      - line-provider-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB_TEST_NAME} -U ${DB_TEST_USER}" ]
      interval: 10s
      retries: 5
      timeout: 5s


  app_line-provider:
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      DB_HOST: ${DB_HOST}
    env_file:
      - .env
    container_name: app_line-provider
    volumes:
      - ./DockerVolumes/app_line-provider:/app_line-provider
    entrypoint: ./entrypoint.sh
    ports:
      - ${APP_PORT}:8000
    depends_on:
      db_line-provider:
        condition: service_healthy
    networks:
      - line-provider-network

networks:
  line-provider-network:
    driver: bridge
